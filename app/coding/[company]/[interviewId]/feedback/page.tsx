'use client';

import { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { ArrowLeft, Download, Home } from 'lucide-react';
import { useCurrentUser } from '@/hooks/useCurrentUser';

const FeedbackPage = () => {
  const params = useParams();
  const router = useRouter();
  const company = params.company as string;
  const interviewId = params.interviewId as string;
  const { user, loading: userLoading } = useCurrentUser();
  
  const [interview, setInterview] = useState<CodingInterview | null>(null);
  const [feedback, setFeedback] = useState<any>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchData = async () => {
      if (!user?.id) return;
      
      try {
        // Fetch interview data
        const interviewResponse = await fetch(`/api/coding/interviews/${interviewId}`);
        const interviewData = await interviewResponse.json();
        
        if (interviewResponse.ok) {
          setInterview(interviewData.interview);
          
          // Fetch feedback data
          try {
            const feedbackResponse = await fetch(`/api/coding/interviews/${interviewId}/feedback?userId=${user.id}`);
            if (feedbackResponse.ok) {
              const feedbackData = await feedbackResponse.json();
              setFeedback(feedbackData.feedback);
            }
          } catch (feedbackError) {
            console.log('No feedback found yet');
          }
        } else {
          console.error('Interview not found');
          router.push(`/coding/${company}`);
        }
      } catch (error) {
        console.error('Error fetching data:', error);
      } finally {
        setLoading(false);
      }
    };

    if (interviewId && user?.id) {
      fetchData();
    }
  }, [interviewId, company, router, user?.id]);

  const downloadFeedback = () => {
    if (!feedback) return;
    
    const feedbackText = `
${company.toUpperCase()} CODING INTERVIEW FEEDBACK
Interview ID: ${interviewId}
Problem: ${interview?.question.title}
Date: ${interview?.completedAt ? new Date(interview.completedAt).toLocaleDateString() : 'N/A'}

OVERALL SCORE: ${feedback.totalScore}/50

CATEGORY SCORES:
${feedback.categoryScores.map((cat: any) => `- ${cat.name}: ${cat.score}/10 - ${cat.comment}`).join('\n')}

CODE REVIEW:
${feedback.codeReview}

STRENGTHS:
${feedback.strengths.map((s: string) => `- ${s}`).join('\n')}

AREAS FOR IMPROVEMENT:
${feedback.areasForImprovement.map((a: string) => `- ${a}`).join('\n')}

FINAL ASSESSMENT:
${feedback.finalAssessment}

Generated by AI Interviewer
    `.trim();
    
    const element = document.createElement('a');
    const file = new Blob([feedbackText], { type: 'text/plain' });
    element.href = URL.createObjectURL(file);
    element.download = `${company}-coding-interview-${interviewId}-feedback.txt`;
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  };

  if (loading || userLoading) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center">
        <div className="text-center">
          <div className="h-8 w-8 animate-spin rounded-full border-4 border-primary border-t-transparent mx-auto mb-4"></div>
          <p className="text-muted-foreground">Loading feedback...</p>
        </div>
      </div>
    );
  }

  if (!user) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center">
        <div className="text-center">
          <p className="text-muted-foreground mb-4">Please sign in to view feedback</p>
          <Button onClick={() => router.push('/sign-in')}>
            Sign In
          </Button>
        </div>
      </div>
    );
  }

  if (!interview) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center">
        <div className="text-center">
          <p className="text-muted-foreground mb-4">Interview not found</p>
          <Button onClick={() => router.push(`/coding/${company}`)}>
            <ArrowLeft className="w-4 h-4 mr-2" />
            Back to {company} Coding
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <header className="border-b border-border bg-card/50 backdrop-blur-sm">
        <div className="container mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <Button
                variant="ghost"
                size="sm"
                onClick={() => router.push(`/coding/${company}/${interviewId}`)}
                className="text-muted-foreground hover:text-foreground"
              >
                <ArrowLeft className="w-4 h-4 mr-2" />
                Back to Interview
              </Button>
              <div>
                <h1 className="text-xl font-semibold text-foreground">
                  Interview Feedback
                </h1>
                <p className="text-sm text-muted-foreground capitalize">
                  {company} â€¢ {interview.question.title}
                </p>
              </div>
            </div>
            <div className="flex items-center space-x-2">
              <Button
                variant="outline"
                size="sm"
                onClick={downloadFeedback}
                disabled={!feedback}
              >
                <Download className="w-4 h-4 mr-2" />
                Download
              </Button>
              <Button
                variant="default"
                size="sm"
                onClick={() => router.push('/')}
              >
                <Home className="w-4 h-4 mr-2" />
                Home
              </Button>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="container mx-auto px-6 py-6">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Problem Summary */}
          <div>
            <Card className="p-6 bg-card border-border">
              <h2 className="text-lg font-semibold text-foreground mb-4">
                Problem Summary
              </h2>
              <div className="space-y-3">
                <div>
                  <h3 className="text-sm font-medium text-foreground">
                    {interview.question.title}
                  </h3>
                  <p className="text-sm text-muted-foreground mt-1">
                    {interview.question.description.substring(0, 150)}...
                  </p>
                </div>
                <div className="pt-3 border-t border-border space-y-2">
                  <div className="flex justify-between text-sm">
                    <span className="text-muted-foreground">Started:</span>
                    <span className="text-foreground">
                      {new Date(interview.createdAt).toLocaleDateString()}
                    </span>
                  </div>
                  {interview.completedAt && (
                    <div className="flex justify-between text-sm">
                      <span className="text-muted-foreground">Completed:</span>
                      <span className="text-foreground">
                        {new Date(interview.completedAt).toLocaleDateString()}
                      </span>
                    </div>
                  )}
                  <div className="flex justify-between text-sm">
                    <span className="text-muted-foreground">Company:</span>
                    <span className="text-foreground capitalize">{company}</span>
                  </div>
                </div>
              </div>
            </Card>
          </div>

          {/* Feedback */}
          <div className="lg:col-span-2">
            {feedback ? (
              <div className="space-y-6">
                {/* Score Overview */}
                <Card className="p-6 bg-card border-border">
                  <div className="flex items-center justify-between mb-4">
                    <h2 className="text-lg font-semibold text-foreground">
                      Overall Performance
                    </h2>
                    <div className="text-3xl font-bold text-primary">
                      {feedback.totalScore}/50
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {feedback.categoryScores.map((category: any, index: number) => (
                      <div key={index} className="space-y-2">
                        <div className="flex justify-between">
                          <span className="text-sm font-medium text-foreground">
                            {category.name}
                          </span>
                          <span className="text-sm text-muted-foreground">
                            {category.score}/10
                          </span>
                        </div>
                        <div className="w-full bg-muted rounded-full h-2">
                          <div
                            className="bg-primary h-2 rounded-full transition-all duration-300"
                            style={{ width: `${(category.score / 10) * 100}%` }}
                          ></div>
                        </div>
                        <p className="text-xs text-muted-foreground">
                          {category.comment}
                        </p>
                      </div>
                    ))}
                  </div>
                </Card>

                {/* Code Review */}
                {feedback.codeReview && (
                  <Card className="p-6 bg-card border-border">
                    <h3 className="text-lg font-semibold text-foreground mb-4">
                      Code Review
                    </h3>
                    <div className="bg-muted/50 p-4 rounded-lg">
                      <pre className="whitespace-pre-wrap text-sm text-foreground">
                        {feedback.codeReview}
                      </pre>
                    </div>
                  </Card>
                )}

                {/* Strengths and Improvements */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <Card className="p-6 bg-card border-border">
                    <h3 className="text-lg font-semibold text-foreground mb-4 text-green-400">
                      Strengths
                    </h3>
                    <ul className="space-y-2">
                      {feedback.strengths.map((strength: string, index: number) => (
                        <li key={index} className="text-sm text-muted-foreground flex items-start">
                          <span className="text-green-400 mr-2">âœ“</span>
                          {strength}
                        </li>
                      ))}
                    </ul>
                  </Card>

                  <Card className="p-6 bg-card border-border">
                    <h3 className="text-lg font-semibold text-foreground mb-4 text-orange-400">
                      Areas for Improvement
                    </h3>
                    <ul className="space-y-2">
                      {feedback.areasForImprovement.map((improvement: string, index: number) => (
                        <li key={index} className="text-sm text-muted-foreground flex items-start">
                          <span className="text-orange-400 mr-2">â€¢</span>
                          {improvement}
                        </li>
                      ))}
                    </ul>
                  </Card>
                </div>

                {/* Final Assessment */}
                <Card className="p-6 bg-card border-border">
                  <h3 className="text-lg font-semibold text-foreground mb-4">
                    Final Assessment
                  </h3>
                  <p className="text-sm text-muted-foreground">
                    {feedback.finalAssessment}
                  </p>
                </Card>
              </div>
            ) : (
              <Card className="p-6 bg-card border-border">
                <h2 className="text-lg font-semibold text-foreground mb-4">
                  AI Feedback
                </h2>
                <div className="text-center py-8">
                  <div className="h-8 w-8 animate-spin rounded-full border-4 border-primary border-t-transparent mx-auto mb-4"></div>
                  <p className="text-muted-foreground">
                    Generating feedback... This may take a few moments.
                  </p>
                </div>
              </Card>
            )}

            {/* Code Solution */}
            {interview.code && (
              <Card className="p-6 bg-card border-border mt-6">
                <h2 className="text-lg font-semibold text-foreground mb-4">
                  Your Solution
                </h2>
                <div className="bg-muted/50 p-4 rounded-lg">
                  <pre className="text-sm text-foreground font-mono overflow-x-auto">
                    {interview.code}
                  </pre>
                </div>
              </Card>
            )}

            {/* Transcript */}
            {interview.transcript && interview.transcript.length > 0 && (
              <Card className="p-6 bg-card border-border mt-6">
                <h2 className="text-lg font-semibold text-foreground mb-4">
                  Interview Transcript
                </h2>
                <div className="space-y-3 max-h-96 overflow-y-auto">
                  {interview.transcript.map((entry, index) => (
                    <div
                      key={index}
                      className={`p-3 rounded-lg ${
                        entry.role === 'user'
                          ? 'bg-primary/10 border-l-4 border-primary'
                          : 'bg-muted/50 border-l-4 border-muted-foreground'
                      }`}
                    >
                      <div className="flex items-center justify-between mb-1">
                        <span className="text-xs font-medium text-muted-foreground uppercase">
                          {entry.role === 'user' ? 'You' : 'AI Interviewer'}
                        </span>
                        <span className="text-xs text-muted-foreground">
                          {new Date(entry.timestamp).toLocaleTimeString()}
                        </span>
                      </div>
                      <p className="text-sm text-foreground">{entry.content}</p>
                    </div>
                  ))}
                </div>
              </Card>
            )}
          </div>
        </div>
      </main>
    </div>
  );
};

export default FeedbackPage;
