[
  {
    "title": "Reverse Linked List",
    "description": "Given the `head` of a singly linked list, reverse the list, and return *the reversed list*.",
    "constraints": [
      "The number of nodes in the list is the range [0, 5000].",
      "-5000 <= Node.val <= 5000"
    ],
    "example": {
      "Input": "head = [1, 2, 3, 4, 5]",
      "Output": "[5, 4, 3, 2, 1]"
    }
  },
  {
    "title": "Maximum Subarray",
    "description": "Given an integer array `nums`, find the contiguous subarray (containing at least one number) which has the largest sum and return *its sum*. A **subarray** is a **contiguous** part of an array.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^4 <= nums[i] <= 10^4"
    ],
    "example": {
      "Input": "nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]",
      "Output": "6",  
      "Explanation": "[4, -1, 2, 1] has the largest sum = 6."
    }
  },
  {
    "title": "Binary Tree Level Order Traversal",
    "description": "Given the `root` of a binary tree, return *the level order traversal of its nodes' values*. (i.e., from left to right, level by level).",
    "constraints": [
      "The number of nodes in the tree is in the range [0, 2000].",
      "-1000 <= Node.val <= 1000"
    ],
    "example": {
      "Input": "root = [3, 9, 20, null, null, 15, 7]",
      "Output": "[[3], [9, 20], [15, 7]]"
    }
  },
  {
    "title": "Sliding Window Maximum",
    "description": "You are given an array of integers `nums`, there is a sliding window of size `k` which is moving from the very left of the array to the very right. You can only see the `k` numbers in the window. Each time the sliding window moves right by one position. Return *the max sliding window*.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^4 <= nums[i] <= 10^4",
      "1 <= k <= nums.length"
    ],
    "example": {
      "Input": "nums = [1, 3, -1, -3, 5, 3, 6, 7], k = 3",
      "Output": "[3, 3, 5, 5, 6, 7]"
    }
  }
]
